import{a as l,c as e,d as i,o as n}from"./app-D5tjPIRP.js";const a={};function o(p,t){return n(),e("div",null,[...t[0]||(t[0]=[i('<h2 id="apollo-客户端服务端通信模型" tabindex="-1"><a class="header-anchor" href="#apollo-客户端服务端通信模型"><span>Apollo 客户端服务端通信模型</span></a></h2><p>客户端有两种获取到配置的方式</p><ol><li><p>服务端告知方式：</p></li><li><p>客户端和服务端保持了一个<strong>长连接</strong>，从而能第一时间获得配置更新的推送。（通过<strong>Http Long Polling</strong>实现），长连接的超时时间是60s，会返回一个304。</p></li><li><p>开发者在AdminService修改配置，ConfigService有个每秒扫描的定时线程，监听数据库实现的消息队列，获取到变动的消息。此时会直接返回新的配置信息。</p></li><li><p>客户端主动拉取：</p></li><li><p>客户端有个兜底机制，每隔5分钟会主动向服务端拉最新的配置。</p></li></ol><h2 id="http-long-polling是什么-怎么实现的" tabindex="-1"><a class="header-anchor" href="#http-long-polling是什么-怎么实现的"><span>Http Long Polling是什么，怎么实现的</span></a></h2><p>HTTP Long Polling 是一种常用的保持客户端与服务器之间<strong>长时间连接</strong>的技术，它能够<strong>在传统的请求/响应模型中模拟服务器推送消息的行为</strong>。Long Polling 允许服务器在有数据时立即响应请求，如果没有数据，则等待一段时间直到数据可用或超时为止。</p><p>它的操作方式如下：</p><ul><li><p>客户端发送一个 HTTP 请求（这可以是长连接或短连接）。</p></li><li><p>服务器保持连接打开直到有数据可返回（或超时），然后返回响应并关闭连接。</p></li><li><p>客户端接收到响应后，无论结果如何，都会立即重新建立一个新的 HTTP 请求，开始新的轮询周期。</p></li></ul><p>本质上HTTP Long Polling是短连接。虽然发起的HTTP连接可能是长连接或者短连接形式的。但Long Polling每次当服务端返回之后都会关闭连接，不会保持这次连接，没有利用到长连接的复用TCP的特性。</p><h2 id="贡献者" tabindex="-1"><a class="header-anchor" href="#贡献者"><span>贡献者</span></a></h2><div class="contributors-list" style="display:flex;gap:20px;flex-wrap:wrap;margin-top:20px;"><div style="text-align:center;"><img src="https://avatars.githubusercontent.com/u/94302726?v=4" alt="魏知乐" style="width:80px;border-radius:50%;"><p style="margin-top:8px;"><a href="https://github.com/spaceluke" target="_blank">魏知乐</a></p></div></div>',10)])])}const s=l(a,[["render",o]]),g=JSON.parse('{"path":"/LearningRoute/bvb3h5i0/","title":"Apollo通信模型","lang":"zh-CN","frontmatter":{"title":"Apollo通信模型","createTime":"2025/10/05 22:56:00","permalink":"/LearningRoute/bvb3h5i0/"},"readingTime":{"minutes":1.78,"words":534},"git":{"createdTime":1759912112000,"updatedTime":1759912112000},"filePathRelative":"notes/LearningRoute/2.WEB方向/2.WEB后端/9.Apollo通信模型.md","headers":[]}');export{s as comp,g as data};
