import{a,c as l,d as i,o as e}from"./app-D5tjPIRP.js";const n={};function s(h,p){return e(),l("div",null,[...p[0]||(p[0]=[i('<p>默认你知道什么是进程 什么是线程。</p><hr><h2 id="进程的几种状态" tabindex="-1"><a class="header-anchor" href="#进程的几种状态"><span>进程的几种状态</span></a></h2><ol><li><p>运行态</p></li><li><p>阻塞态</p></li><li><p>就绪态</p></li></ol><p>在虚拟内存的操作系统中，并不会把所有进程都加载到内存中，所以会有新的状态 <strong>挂起态</strong> 代表进程在磁盘中，还没加载到内存中</p><p>挂起态可以分为：</p><ul><li><p>阻塞挂起态</p></li><li><p>就绪挂起态</p></li></ul><h2 id="进程的控制结构pcb" tabindex="-1"><a class="header-anchor" href="#进程的控制结构pcb"><span>进程的控制结构PCB</span></a></h2><p>PCB是一种描述进程的数据结构，一个进程会对应一个唯一的PCB。</p><p>PCB中包含了进程的很多信息：</p><ol><li><p>进程的状态</p></li><li><p>进程的优先级</p></li><li><p>进程拥有的资源分配清单</p></li></ol><p>PCB是以链表的形式组织在一起的，组成队列的形式</p><ul><li><p>就绪队列</p></li><li><p>阻塞队列</p></li></ul><p><strong>线程是进程当中的一条执行流程。</strong></p><h2 id="线程和进程的比较" tabindex="-1"><a class="header-anchor" href="#线程和进程的比较"><span>线程和进程的比较</span></a></h2><ol><li><p>从概念上来说，进程是资源分配的单位，线程是CPU调度的单位</p></li><li><p>从资源分配上来说，进程之间相互独立，线程之间只独享寄存器和栈这种必不可少的资源</p></li><li><p>从切换的开销来看：主要体现在进程切换需要刷掉TLB，同一个进程中的线程切换则不用</p></li></ol><h2 id="线程的种类" tabindex="-1"><a class="header-anchor" href="#线程的种类"><span>线程的种类</span></a></h2><p>用户级线程：</p><ol><li><p>进程自己进行线程管理，操作系统是不知道这些线程的，只知道进程的状态。</p></li><li><p>优点：不需要切换到内核态，速度快</p></li><li><p>缺点：其他线程无法打断正在运行的线程，容易让整个进程都阻塞住。</p></li></ol><p>内核级线程：</p><ol><li><p>内核级线程由操作系统管理</p></li><li><p>优点：一个线程阻塞，其他线程还有机会正常工作</p></li><li><p>缺点：需要切换内核态，开销大</p></li></ol><h2 id="linux中的调度" tabindex="-1"><a class="header-anchor" href="#linux中的调度"><span>Linux中的调度</span></a></h2><p>虽然说是进程的调度，但其实对于Linux的调度器，其调度的基本单位是还是线程。</p><p><strong>Linux实现的线程的基本方式都是轻量级进程LWP，可以共享一个进程的资源。</strong></p><p>因此对于多线程的进程，每个线程都可以被调度器调度。</p><p>对于所有进程，都会有一个主线程，这也是调度器调度的对象。</p><p>所以调度的基本单位还是线程。</p><h3 id="调度算法" tabindex="-1"><a class="header-anchor" href="#调度算法"><span>调度算法</span></a></h3><p>主要分为抢占式和非抢占式两种：</p><ul><li><p>非抢占式： </p><ul><li><p>先来先服务</p></li><li><p>最短作业优先</p></li></ul></li><li><p>抢占式： </p><ul><li>时间片轮转法</li></ul></li></ul><h1 id="二、多进程、多线程、锁" tabindex="-1"><a class="header-anchor" href="#二、多进程、多线程、锁"><span>二、多进程、多线程、锁</span></a></h1><h2 id="多进程直接的通信机制" tabindex="-1"><a class="header-anchor" href="#多进程直接的通信机制"><span>多进程直接的通信机制</span></a></h2><p>内核提供一些通信的方式，比如管道和消息队列，但都需要做数据的拷贝和os状态切换，都比较慢，开销比较大。</p><p>最快的通信机制是共享内存，不需要系统调用和拷贝数据，但也会带来共享资源的问题。所以可以用信号量Semaphore来解决，也就是所谓PV操作，可以实现访问的互斥，进程的同步。</p><p>Signal信号和Semaphore信号量不同，是异步通信机制，比如说kill -x 传入的x就是Signal</p><p>不同主机间的通信可以用Socket通信</p><h2 id="死锁相关" tabindex="-1"><a class="header-anchor" href="#死锁相关"><span>死锁相关</span></a></h2><h3 id="死锁的四个条件" tabindex="-1"><a class="header-anchor" href="#死锁的四个条件"><span>死锁的四个条件</span></a></h3><ol><li><p>互斥条件：一个资源同时只能由一个进程获取</p></li><li><p>持有等待：一个进程在等待资源的时候不会释放自己持有的资源</p></li><li><p>环路等待：两个进程获取资源的顺序构成了环</p></li><li><p>不可剥夺：进程拥有的资源不会被剥夺走</p></li></ol><h3 id="避免死锁的发生" tabindex="-1"><a class="header-anchor" href="#避免死锁的发生"><span>避免死锁的发生</span></a></h3><p>破坏四个条件中的任何一个都可以，一般最常见并且可行的就是使用资源有序分配法，破坏环路等待条件。</p><p>不同进程在获取资源的时候，按照一个相同的顺序去一个一个申请。</p><h2 id="互斥锁与自旋锁" tabindex="-1"><a class="header-anchor" href="#互斥锁与自旋锁"><span>互斥锁与自旋锁</span></a></h2><p>是最底层的两种锁。</p><h3 id="互斥锁" tabindex="-1"><a class="header-anchor" href="#互斥锁"><span>互斥锁</span></a></h3><p>互斥锁加锁失败后，线程会释放CPU给其他线程，自己会阻塞住。这个阻塞是由操作系统内核实现的，会把线程置为sleep状态，等到锁释放的时候，内核会在合适的时机唤醒线程，当其成功获取锁的时候，可以继续执行。</p><p>当获取锁失败的时候，会从用户态进入内核态，会带来两次系统切换的成本，虽然说线程的系统切换成本低，但仍然还是需要一定时间的。</p><p>因此，如果锁住的代码执行很快，可能比上下文切换时间都要快，这时候就可以不用互斥锁，选用自旋锁。</p><h3 id="自旋锁" tabindex="-1"><a class="header-anchor" href="#自旋锁"><span>自旋锁</span></a></h3><p>通过CPU提供的CAS函数，在用户态完成加锁和释放操作，不会产生线程上下文切换</p><p>CAS函数：先查看锁状态，如果是空闲的就把锁设为当前线程私有。</p><p>如果CAS加锁失败，线程会一直自旋，忙等待，会一直进行CAS尝试，直到拿到锁，简单的实现方式就是while循环。需要注意的是，自旋的线程永远不会主动放弃CPU。</p><p>自旋锁锁状态中心化，竞争激烈时，可能会导致多个CPU的高速缓存频繁同步，拖慢CPU效率。并且可能会出现锁饥饿问题。</p><h3 id="clh锁" tabindex="-1"><a class="header-anchor" href="#clh锁"><span>CLH锁</span></a></h3><p>CLH 锁是对自旋锁的一种改进。</p><p>首先它将线程组织成一个队列，保证先请求的线程先获得锁，避免了饥饿问题。</p><p>其次锁状态去中心化，让每个线程在不同的状态变量中自旋，这样当一个线程释放它的锁时，只能使其后续线程的高速缓存失效，缩小了影响范围，从而减少了 CPU 的开销。</p><p>CLH 锁数据结构很简单，类似一个链表队列，所有请求获取锁的线程会排列在链表队列中，自旋访问队列中前一个节点的状态。当一个节点释放锁时，只有它的后一个节点才可以得到锁。CLH锁没有显式的维护队列中的next和prev指针变量。</p><p>因此，CLH锁：</p><ul><li><p>性能比自旋锁好</p></li><li><p>公平锁</p></li><li><p>实现简单</p></li><li><p>扩展性强</p></li></ul><p>同时仍存在缺点：</p><ul><li><p>自旋操作，CPU负担大</p></li><li><p>功能单一</p></li></ul><h3 id="aqs锁" tabindex="-1"><a class="header-anchor" href="#aqs锁"><span>AQS锁</span></a></h3><p>AQS基于CLH进行改造，首先就是把自旋操作改成了阻塞操作。</p><p>并且做了三方面的扩展：</p><ul><li><p>扩展每个节点的状态</p></li><li><p>显式的维护prev、next</p></li><li><p>辅助gc的一些操作</p></li></ul><h2 id="悲观锁和乐观锁" tabindex="-1"><a class="header-anchor" href="#悲观锁和乐观锁"><span>悲观锁和乐观锁</span></a></h2><p>悲观锁：悲观锁认为出现共享资源的冲突的可能性高，所以在访问共享资源之前都要上锁。</p><p>乐观锁：假定冲突的概率很低，在提交修改的时候判断资源是不是被修改过。是无锁的。</p><h2 id="可重入锁" tabindex="-1"><a class="header-anchor" href="#可重入锁"><span>可重入锁</span></a></h2><p>线程可以再次获取自己的内部锁</p><h2 id="公平与非公平锁" tabindex="-1"><a class="header-anchor" href="#公平与非公平锁"><span>公平与非公平锁</span></a></h2><p>对公平锁来说，先申请的线程会先获取到，非公平锁则是后申请的线程可能先拿到锁，随机或者按照某种优先级排序的，性能好，但是可能会导致有的线程永远拿不到锁</p><h2 id="可中断锁和不可中断锁" tabindex="-1"><a class="header-anchor" href="#可中断锁和不可中断锁"><span>可中断锁和不可中断锁</span></a></h2><p>获取锁的过程中，是否可以被中断，lockInterruptibly之后，这个线程是可以被中断的。</p><h2 id="贡献者" tabindex="-1"><a class="header-anchor" href="#贡献者"><span>贡献者</span></a></h2><div class="contributors-list" style="display:flex;gap:20px;flex-wrap:wrap;margin-top:20px;"><div style="text-align:center;"><img src="https://avatars.githubusercontent.com/u/94302726?v=4" alt="魏知乐" style="width:80px;border-radius:50%;"><p style="margin-top:8px;"><a href="https://github.com/spaceluke" target="_blank">魏知乐</a></p></div></div>',77)])])}const t=a(n,[["render",s]]),d=JSON.parse('{"path":"/ComputerFundamentals/lzjwojoh/","title":"进程管理","lang":"zh-CN","frontmatter":{"title":"进程管理","createTime":"2025/10/05 23:09:48","permalink":"/ComputerFundamentals/lzjwojoh/"},"readingTime":{"minutes":6.55,"words":1966},"git":{"createdTime":1759912112000,"updatedTime":1759912112000},"filePathRelative":"notes/ComputerFundamentals/进程管理.md","headers":[]}');export{t as comp,d as data};
