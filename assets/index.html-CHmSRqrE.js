import{a as e,c as t,d as p,o as r}from"./app-D5tjPIRP.js";const s={};function n(i,a){return r(),t("div",null,[...a[0]||(a[0]=[p('<h2 id="虚拟内存的好处" tabindex="-1"><a class="header-anchor" href="#虚拟内存的好处"><span>虚拟内存的好处</span></a></h2><p>可以起到隔离的作用，进程间内存不会互相影响。</p><h2 id="内存分页" tabindex="-1"><a class="header-anchor" href="#内存分页"><span>内存分页</span></a></h2><p>基本单位是Page页，大小一般为4KB</p><p>虚拟内存和物理内存之间用页表来映射。</p><p>虚拟内存分为两部分：页号+页内偏移。</p><p>页号用于从<strong>页表</strong>处转换到物理地址，页表的结构为 虚拟页号+物理页号</p><h3 id="内存地址的转换过程" tabindex="-1"><a class="header-anchor" href="#内存地址的转换过程"><span>内存地址的转换过程</span></a></h3><ol><li><p>虚拟内存地址 → 页号+偏移量</p></li><li><p>根据页号从页表得到物理页地址</p></li><li><p>物理页地址+偏移量 → 物理内存地址</p></li></ol><h3 id="多级页表为什么可以节省内存" tabindex="-1"><a class="header-anchor" href="#多级页表为什么可以节省内存"><span>多级页表为什么可以节省内存</span></a></h3><p>单级页表的情况下，os给每个进程分配页表空间时，不知道进程到底会怎么访问主存，所以会分配一个可以包括所有页表项的空间，32位os，会分配4MB大小的内存。进程一多，就十分浪费内存空间。（4MB = 2 ^ 32 B全部空间 / 4KB页大小 * 4B32位页表项大小 = 1M * 4B = 4MB），放到64位系统中，更是灾难。</p><p>多级页表可以解决这个问题，一级页表就可以覆盖整个虚拟内存空间，但是内存占用很小。如果一级页表中的一个项没有被用到，也就不用创建对应的二级页表了，可以在需要的时候再创建二级页表。</p><h3 id="tlb" tabindex="-1"><a class="header-anchor" href="#tlb"><span>TLB</span></a></h3><p>多级页表可以节省内存空间，但是带来的成本就是要多做几次转换。为了加速这个过程，在CPU中有个专门存放页表项的Cache，就是TLB，快表。</p><p>CPU里面会封装一个MMU芯片，寻址的时候先查TLB，没找到才去找常规的页表。</p><p>进程切换会导致TLB失效，要重新从内存中读取页表，线程切换则不用。因此进程切换的代价较大。</p><h2 id="贡献者" tabindex="-1"><a class="header-anchor" href="#贡献者"><span>贡献者</span></a></h2><div class="contributors-list" style="display:flex;gap:20px;flex-wrap:wrap;margin-top:20px;"><div style="text-align:center;"><img src="https://avatars.githubusercontent.com/u/94302726?v=4" alt="魏知乐" style="width:80px;border-radius:50%;"><p style="margin-top:8px;"><a href="https://github.com/spaceluke" target="_blank">魏知乐</a></p></div></div>',18)])])}const d=e(s,[["render",n]]),h=JSON.parse('{"path":"/ComputerFundamentals/wmbrh8qr/","title":"内存管理","lang":"zh-CN","frontmatter":{"title":"内存管理","createTime":"2025/10/05 23:09:48","permalink":"/ComputerFundamentals/wmbrh8qr/"},"readingTime":{"minutes":1.88,"words":563},"git":{"createdTime":1759912112000,"updatedTime":1759912112000},"filePathRelative":"notes/ComputerFundamentals/内存管理.md","headers":[]}');export{d as comp,h as data};
