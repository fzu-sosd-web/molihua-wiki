import{a as i,c as e,d as a,o as l}from"./app-D5tjPIRP.js";const r={};function n(t,s){return l(),e("div",null,[...s[0]||(s[0]=[a('<h2 id="_1-1-mysql基础知识" tabindex="-1"><a class="header-anchor" href="#_1-1-mysql基础知识"><span>1.1 MySQL基础知识</span></a></h2><h3 id="_1-1-1-数据库与表" tabindex="-1"><a class="header-anchor" href="#_1-1-1-数据库与表"><span>1.1.1 数据库与表</span></a></h3><ul><li><p><strong>数据库</strong>：存储相关数据的集合，包含多个表。</p></li><li><p><strong>表</strong>：数据库中的数据组织形式，由行（记录）和列（字段）组成。</p></li></ul><h3 id="_1-1-2-数据类型" tabindex="-1"><a class="header-anchor" href="#_1-1-2-数据类型"><span>1.1.2 数据类型</span></a></h3><ul><li><p><strong>整型</strong>：INT、TINYINT、BIGINT等。</p></li><li><p><strong>浮点型</strong>：FLOAT、DOUBLE等。</p></li><li><p><strong>字符型</strong>：VARCHAR、CHAR、TEXT等。</p></li><li><p><strong>日期时间型</strong>：DATE、TIME、DATETIME、TIMESTAMP等。</p></li></ul><h3 id="_1-1-3-约束" tabindex="-1"><a class="header-anchor" href="#_1-1-3-约束"><span>1.1.3 约束</span></a></h3><ul><li><p><strong>主键</strong>：唯一标识记录，不能重复或为空。</p></li><li><p><strong>外键</strong>：用于关联不同表的字段，保证数据一致性。</p></li><li><p><strong>唯一约束</strong>：确保某列中的值唯一。</p></li><li><p><strong>非空约束</strong>：禁止列值为空。</p></li></ul><h3 id="_1-1-4-索引" tabindex="-1"><a class="header-anchor" href="#_1-1-4-索引"><span>1.1.4 索引</span></a></h3><ul><li><p><strong>概念</strong>：索引是数据库中一种数据结构，用于快速查询和访问数据。</p></li><li><p><strong>类型</strong>：</p><ul><li><p><strong>单列索引</strong>：针对单个列的索引。</p></li><li><p><strong>复合索引</strong>：针对多个列的组合索引。</p></li><li><p><strong>全文索引</strong>：用于快速全文搜索。</p></li></ul></li><li><p><strong>注意事项</strong>：索引会加快查询速度，但也会增加写入、更新和删除的开销。</p></li></ul><h3 id="_1-1-5-锁" tabindex="-1"><a class="header-anchor" href="#_1-1-5-锁"><span>1.1.5 锁</span></a></h3><ul><li><p><strong>概念</strong>：锁用于控制对数据的并发访问，防止数据不一致。</p></li><li><p><strong>类型</strong>：</p><ul><li><p><strong>共享锁</strong>：多个事务可以同时读取，但不能写入。</p></li><li><p><strong>排他锁</strong>：事务独占对数据的访问，其他事务不能读取或写入。</p></li></ul></li><li><p><strong>事务隔离级别</strong>：</p><ul><li><p><strong>读未提交</strong>：允许读取未提交的数据。</p></li><li><p><strong>读已提交</strong>：只允许读取已提交的数据。</p></li><li><p><strong>可重复读</strong>：在同一事务中多次读取，结果一致。</p></li><li><p><strong>串行化</strong>：事务完全隔离，确保数据的一致性。</p></li></ul></li></ul><h3 id="_1-1-6-事务管理" tabindex="-1"><a class="header-anchor" href="#_1-1-6-事务管理"><span>1.1.6 事务管理</span></a></h3><ul><li><p><strong>事务</strong>：一组操作的集合，要么全部成功，要么全部失败。</p></li><li><p><strong>ACID特性</strong>：</p><ul><li><p><strong>原子性</strong>：操作不可分割，全部成功或全部失败。</p></li><li><p><strong>一致性</strong>：事务执行前后数据保持一致。</p></li><li><p><strong>隔离性</strong>：多个事务并发执行时相互独立。</p></li><li><p><strong>持久性</strong>：一旦事务提交，数据永久保存。</p></li></ul></li></ul><h1 id="_2-实践内容" tabindex="-1"><a class="header-anchor" href="#_2-实践内容"><span>2. 实践内容</span></a></h1><h2 id="_2-1-mysql环境搭建" tabindex="-1"><a class="header-anchor" href="#_2-1-mysql环境搭建"><span>2.1 MySQL环境搭建</span></a></h2><p><strong>内容</strong>：我们需要自己安装一台数据库管理服务DBMS，比如说MySQL，可以在本机或者自己的Linux服务器上面安装一台独立的MySQL，以用于自己的学习和测试。</p><p><strong>目标</strong>：获得一个MySQL的连接url，以及用来登录的账号和密码</p><p><strong>安装方式</strong>：有非常多种，这边出于简单只提供Docker的模式。Docker 是一个流行的容器化技术，用于快速部署和运行应用程序，如果你还不会Docker，那可能还需要学习下Docker的基本概念和使用。</p><h3 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h3><p>确保已经安装了 Docker。如果未安装，请参考 <a href="https://docs.docker.com/get-docker/" target="_blank" rel="noopener noreferrer">Docker 官方文档</a> 来完成安装。</p><h3 id="_1-拉取-mysql-镜像" tabindex="-1"><a class="header-anchor" href="#_1-拉取-mysql-镜像"><span>1. 拉取 MySQL 镜像</span></a></h3><p>首先，我们需要从 Docker Hub 拉取官方的 MySQL 镜像：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li><p><code>docker pull</code>：这是从 Docker Hub（镜像仓库）下载镜像的命令。</p></li><li><p><code>mysql</code>：这是我们要拉取的镜像名称，Docker Hub 上有官方的 MySQL 镜像。</p></li></ul><h3 id="_2-1-2-创建并运行-mysql-容器" tabindex="-1"><a class="header-anchor" href="#_2-1-2-创建并运行-mysql-容器"><span>2.1.2 创建并运行 MySQL 容器</span></a></h3><p>使用拉取的 MySQL 镜像创建一个容器并运行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my-mysql</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -e</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MYSQL_ROOT_PASSWORD=my-secret-pw</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 3306:3306</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql:latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li><p><code>docker run</code>：这个命令用于创建并运行一个新的容器。</p></li><li><p><code>--name my-mysql</code>：为这个容器指定名称为 <code>my-mysql</code>，方便后续管理。</p></li><li><p><code>-e MYSQL_ROOT_PASSWORD=my-secret-pw</code>：通过 <code>-e</code> 设置环境变量，在这里我们设置 MySQL 的 root 用户密码为 <code>my-secret-pw</code>。</p></li><li><p><code>-d</code>：以后台模式运行容器（detach 模式）。</p></li><li><p><code>mysql:latest</code>：使用最新版本的 MySQL 镜像。</p></li><li><p><code>-p 3306:3306</code>：将主机的 3306 端口映射到容器的 3306 端口。这样你可以通过主机的 <code>localhost:3306</code> 访问 MySQL 服务。主机端口在冒号的左侧，容器内部的端口在右侧。<code>3306</code> 是 MySQL 服务的默认端口号。</p></li></ul><p><strong>默认情况下，容器中的数据不会被持久化。如果你停止或删除容器，数据会丢失。为了持久化 MySQL 数据，我们可以将容器中的数据目录挂载到主机上。</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my-mysql</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /my/own/datadir:/var/lib/mysql</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -e</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MYSQL_ROOT_PASSWORD=my-secret-pw</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql:latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li><code>-v /my/own/datadir:/var/lib/mysql</code>：通过 <code>-v</code> 选项挂载卷，将主机的 <code>/my/own/datadir</code> 目录映射到容器内的 <code>/var/lib/mysql</code> 目录。MySQL 的数据库文件都存储在 <code>/var/lib/mysql</code> 中，这样可以实现数据的持久化。</li></ul><h3 id="_2-1-3-验证容器是否运行" tabindex="-1"><a class="header-anchor" href="#_2-1-3-验证容器是否运行"><span>2.1.3 验证容器是否运行</span></a></h3><p>运行以下命令查看 MySQL 容器的状态：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li><code>docker ps</code>：列出当前运行中的所有容器。可以看到我们的 <code>my-mysql</code> 容器是否正在运行。</li></ul><h3 id="_2-1-4-连接到-mysql-容器" tabindex="-1"><a class="header-anchor" href="#_2-1-4-连接到-mysql-容器"><span>2.1.4 连接到 MySQL 容器</span></a></h3><p>使用以下命令进入 MySQL 容器内部：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> exec</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my-mysql</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mysql</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -uroot</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li><p><code>docker exec</code>：这个命令允许我们在运行中的容器内部执行命令。</p></li><li><p><code>-it</code>：以交互模式连接到容器，<code>-i</code> 保持标准输入打开，<code>-t</code> 分配一个伪终端。</p></li><li><p><code>my-mysql</code>：这是我们容器的名称。</p></li><li><p><code>mysql</code>：我们希望在容器内启动 MySQL 客户端。</p></li><li><p><code>-uroot</code>：使用 root 用户登录。</p></li><li><p><code>-p</code>：表示我们将在提示时输入密码，这时输入之前设置的 <code>my-secret-pw</code>。</p></li></ul><h3 id="_2-1-5-停止和启动-mysql-容器" tabindex="-1"><a class="header-anchor" href="#_2-1-5-停止和启动-mysql-容器"><span>2.1.5 停止和启动 MySQL 容器</span></a></h3><p>如果想要停止容器，可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stop</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my-mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li><p><code>docker stop</code>：停止一个运行中的容器。</p></li><li><p><code>my-mysql</code>：容器的名称。</p></li></ul><p>再次启动容器时，使用以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> start</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my-mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li><p><code>docker start</code>：启动已经停止的容器。</p></li><li><p><code>my-mysql</code>：容器的名称。</p></li></ul><h3 id="_2-1-6-重点-可视化工具连接到mysql" tabindex="-1"><a class="header-anchor" href="#_2-1-6-重点-可视化工具连接到mysql"><span>2.1.6 （重点）可视化工具连接到MySQL</span></a></h3><h4 id="_2-1-6-1-使用可视化工具-datagrip-连接到-docker-中的-mysql" tabindex="-1"><a class="header-anchor" href="#_2-1-6-1-使用可视化工具-datagrip-连接到-docker-中的-mysql"><span>2.1.6.1 使用可视化工具（DataGrip）连接到 Docker 中的 MySQL</span></a></h4><p>使用可视化工具如 <strong>DataGrip</strong> 连接到 MySQL 容器中的数据库，可以让数据库管理和查询更加方便。以下是具体的步骤：</p><h4 id="_2-1-6-2-打开-datagrip-并创建新连接" tabindex="-1"><a class="header-anchor" href="#_2-1-6-2-打开-datagrip-并创建新连接"><span>2.1.6.2 打开 DataGrip 并创建新连接</span></a></h4><ul><li><p>在 DataGrip 中，点击左上角的 <strong>Database</strong> 面板。</p></li><li><p>右键点击 <strong>Data Source</strong>，然后选择 <strong>MySQL</strong>。</p></li></ul><h4 id="_2-1-6-3-配置-mysql-数据源" tabindex="-1"><a class="header-anchor" href="#_2-1-6-3-配置-mysql-数据源"><span>2.1.6.3 配置 MySQL 数据源</span></a></h4><p>在弹出的 <strong>Data Source and Drivers</strong> 窗口中，填写以下信息：</p><ul><li><p><strong>Host</strong>: <code>localhost</code>（如果你在本机运行 Docker 容器）</p></li><li><p><strong>Port</strong>: <code>3306</code>（这是之前映射的端口）</p></li><li><p><strong>User</strong>: <code>root</code>（MySQL 的 root 用户）</p></li><li><p><strong>Password</strong>: <code>my-secret-pw</code>（之前设置的 root 用户密码）</p></li></ul><h4 id="_2-1-6-4-测试连接" tabindex="-1"><a class="header-anchor" href="#_2-1-6-4-测试连接"><span>2.1.6.4 测试连接</span></a></h4><ul><li><p>在填写完这些信息后，点击 <strong>Test Connection</strong> 按钮，DataGrip 将尝试连接到 MySQL 数据库。</p></li><li><p>如果一切正常，DataGrip 会提示连接成功。如果连接失败，检查端口映射和 MySQL 容器的运行状态。</p></li></ul><h4 id="_2-1-6-5-保存并管理数据库" tabindex="-1"><a class="header-anchor" href="#_2-1-6-5-保存并管理数据库"><span>2.1.6.5 保存并管理数据库</span></a></h4><ul><li><p>如果连接成功，点击 <strong>OK</strong> 保存配置。</p></li><li><p>然后你就可以使用 DataGrip 连接到 MySQL 容器中的数据库，执行查询、创建表、管理数据等。</p></li></ul><h4 id="_2-1-6-6-常见问题排查" tabindex="-1"><a class="header-anchor" href="#_2-1-6-6-常见问题排查"><span>2.1.6.6 常见问题排查</span></a></h4><h5 id="_2-1-6-6-1-连接失败" tabindex="-1"><a class="header-anchor" href="#_2-1-6-6-1-连接失败"><span>2.1.6.6.1 <strong>连接失败：</strong></span></a></h5><ul><li><p>检查容器是否正在运行：<code>docker ps</code></p></li><li><p>确认 MySQL 容器的端口 3306 已映射到主机。</p></li><li><p>确认 MySQL 服务正在容器内正常启动：<code>docker logs my-mysql</code></p></li></ul><h5 id="_2-1-6-6-2-防火墙问题" tabindex="-1"><a class="header-anchor" href="#_2-1-6-6-2-防火墙问题"><span>2.1.6.6.2 <strong>防火墙问题：</strong></span></a></h5><ul><li>确保本地或服务器的防火墙没有阻止 3306 端口。如果你是从远程机器连接，可能需要在服务器上开放 3306 端口。</li></ul><h3 id="_2-1-7-删除-mysql-容器-可选" tabindex="-1"><a class="header-anchor" href="#_2-1-7-删除-mysql-容器-可选"><span>2.1.7 删除 MySQL 容器（可选）</span></a></h3><p>如果不再需要这个 MySQL 容器，可以将其删除：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my-mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li><p><code>docker rm</code>：删除容器。</p></li><li><p><code>my-mysql</code>：容器的名称。注意：删除前需要先停止容器。</p></li></ul><h3 id="_2-1-8-查看日志" tabindex="-1"><a class="header-anchor" href="#_2-1-8-查看日志"><span>2.1.8 查看日志</span></a></h3><p>查看 MySQL 容器的日志（如启动信息或错误日志）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> logs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my-mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li><p><code>docker logs</code>：获取容器的日志输出。</p></li><li><p><code>my-mysql</code>：容器的名称。</p></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>通过以上步骤，你已经成功通过 Docker 部署并运行了 MySQL。以下是常用指令的总结：</p><ul><li><p><code>docker pull</code>：拉取镜像。</p></li><li><p><code>docker run</code>：创建并运行容器。</p></li><li><p><code>docker exec</code>：执行容器内的命令。</p></li><li><p><code>docker ps</code>：查看运行中的容器。</p></li><li><p><code>docker stop</code>：停止容器。</p></li><li><p><code>docker start</code>：启动容器。</p></li><li><p><code>docker rm</code>：删除容器。</p></li><li><p><code>docker logs</code>：查看容器日志。</p></li></ul><p>这样你就可以轻松地使用 Docker 管理和运行 MySQL 服务。</p><h2 id="_2-2-拉取项目代码" tabindex="-1"><a class="header-anchor" href="#_2-2-拉取项目代码"><span>2.2 拉取项目代码</span></a></h2><p>直接clone到本地即可进行实践</p><h2 id="_2-3-完成任务-调试" tabindex="-1"><a class="header-anchor" href="#_2-3-完成任务-调试"><span>2.3 完成任务&amp;调试</span></a></h2><p><strong>在README中有关于内容的一切信息。</strong></p><h2 id="贡献者" tabindex="-1"><a class="header-anchor" href="#贡献者"><span>贡献者</span></a></h2><div class="contributors-list" style="display:flex;gap:20px;flex-wrap:wrap;margin-top:20px;"><div style="text-align:center;"><img src="https://avatars.githubusercontent.com/u/94302726?v=4" alt="魏知乐" style="width:80px;border-radius:50%;"><p style="margin-top:8px;"><a href="https://github.com/spaceluke" target="_blank">魏知乐</a></p></div></div>',90)])])}const h=i(r,[["render",n]]),p=JSON.parse('{"path":"/LearningRoute/t7rnln7w/","title":"Lec3 数据库","lang":"zh-CN","frontmatter":{"title":"Lec3 数据库","createTime":"2025/10/04 22:31:32","permalink":"/LearningRoute/t7rnln7w/"},"readingTime":{"minutes":7.03,"words":2108},"git":{"createdTime":1759912112000,"updatedTime":1759912112000},"filePathRelative":"notes/LearningRoute/2.WEB方向/2.WEB后端/5.Lec3 数据库.md","headers":[]}');export{h as comp,p as data};
